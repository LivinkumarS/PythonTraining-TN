Python
------
>> High-level, interpreted, general-purpose programming language.

compilation ---> whole code will get converted into machine code. Ex: C,C++,Java
interpretation --> line by line code execution. Ex: Python

Key - features:
---------------
Simple and easy to read syntax.

.py ---> extension for python file.


In-built function to show an output
--------------------------------------
print() ---> code ---> ouput.

Variable
---------
>> these are just a container to store a piece of data.

rule:
------
>> variable name can contain letters, numbers and _.
>> a variable name should start with lettr or _.
>> cannot use any revserved keywords.. (for, while, if...)


name = data.


In-built function to get input
-------------------------------
input(sentence) output --> code.

to execute python file in terminal ---> python "file name".

Comments
-----------
Comments will not get executed.
Single line comment --> #
mmultiline commnt ---> '''  comment   '''

Basic Syntax Rule
-----------------
>> Case sensitive.
>> Indentation is important.


Datatypes
-----------
type()---> find datatype of an object

Integer---> whole numbers --> Ex: 1,2,3,7,0,-1,-2
Float---> decimal numbers ---> -2.2223, -33.676, 55.555, 1.0

String---> Sequence on characters inside quotes.'',"". for concatination ---> +. formatted string---> f""
It is an iteratable object... using the index number, we can access each and every char from a string.
a="Hello"
a[0]
>>String is immutable.

String Operations
------------------
1)Concatination--->(+)
2)Repetition --> (*)
3)Membership ---> in, not in(Boolean)

In built functions of String 
-----------------------------
.upper() --> convert into uppercase
.lower() --> convert into lowercase
.title() --> convert into titlecase
.strip() --> removes the spaces at begenning and ending
.replace(string,substring)--> replaces a substring
.split() ---> string into a list....
.join(list) ---> list into a string
.find(substring) ---> returns index of the substring. -1 --> not found.
.startswith(substring)--> check whether the string starts with this substring or not.
.endswith(substring) --> check whether the string ends with this substring or not.


Boolean---> True and False

Type Casting
-------------
coverting one datatype into another.

str(obj) ---> converts into string.
int(obj)  --> contverting into Integer
float(obj) --> to float
bool(obj) ---> to float.
list(obj)
set(obj)
tuple(obj)
dict(obj)


Operators
---------
>> 1+2  --> 1,2--> operands, + --> operator.

Arithmetic Operators  (only with numbers)
--------------------
Add ---> +
Sub ---> -
Div ---> /
Mul ---> *
Floor Div --> // (quo)
Modulus ---> % (Reminder). 10%3-->3*3-->9--> 10-9=1. 44%3--> 14*3-->42 -->2. 2/3-->0*3--> 0-->2-0-->2
Expo--> ** --> 2 ** 2 --> 2 power 2.

BODMAS --> Brackets, Order (of), Div, Mul, Add, Sub.

Comparison/Relational Operators
----------------------------------
used to compare values, return only Boolean Values(True/False).

== --> equal to operator.
!= --> not equal.
> ---> greater than
< ---> lesser than 
<= ---> Lesser than or equal 
>= ---> Greater than or equal 

Logical operator (booleans)
----------------

and ---> True--> when the both booleans are true. False otherwise.

or ----> True --> when any one of the oprerands is True. When both are false --> False

not --> one operand. inverts a boolean value.
True --> False
False --> True

boolean1  boolean2
True      True
True      False 
False     True
False     False

Assignment Operators 
--------------------
= ---> assign.
+= --> Add and assign. Ex: a+=b. a=a+b
-= --> Subtract and assign.
*= --> Subtract and assign.
/= --> Div and assign.
%= --> Mod and assign.
**= --> expo and assign

Bitwise Operator 
----------------

(AND) & --> and operation bitwise. 7&8--> 0
(OR) | --> or operation bitwise. 7|8--> 0
(not) ~ --> not operation between bits. Ex: ~5=-6, ~6=-7, ~-7=6. ~a=-(a+1)
(Left Shift) num<<pos --> ex: 6<<2.
(Right Shift) num>>pos --> 6>>2


Control Flow
-------------
>> It execute a block of code depending on conditions.

if block:
---------
>>if the given condition is True, then it will execute that block of code. otherwise, it will just skip it.
syntax:
--------
if condition:
    block of code.

else block:
-----------
>> should always come with if block
syntax 
-------
if condition:
    #if block code 
else:
    #else block code

elif block:
------------
>> this block should come after if block, but before else
syntax 
--------
elif condition:
    #block elif code

if condition1:
    #if block
elif condition2:
    #elif block
elif condition3:
    #elif block
elif condition4:
    #elif block
else:
    #else block

Nested If:
----------
>> Using if statements inside another if.

if condition:
    if condition:
        #block of code

Loops:
------

>> Repitition without writing the same code again.

While Loop:
------------
>> As long as condition is True.
Syntax:
-------
while condition:
    #block of code

For Loop
---------
>> Runs for a fixed number of iteration.
>> It is used to iterate over an iteratable object.
Ex: String, List...

Syntax:
-------
for var in iteratableObj:
    #block of code.

range()--> is used to create an iteratable object that has fixed number of numbers.

range(end)-->[0,1,2,3......9,10].[9,19]
range(start,end)(9,20)-->[9,10,....19]
range(start,end,step) (3,15,2) -->[3,5,7,9,11,13]

Control statements
--------------------
break --> it will break the loop.
continue --> it will just skip the current iteration.

Indexing and slicing
-----------------------
>> works in every iteratable obj.
Indexing---> obj[ind]

Slicing--> a="The war"
1) [start:]--> a[2:]-->"e war"
2) [start: end]--> a[2:4]-->2,3--> "e "
3) [:end] --> 0 to end-1
4) [::-1] --> slice reverse the string 
5) [start:end:steps]


DataStructures
---------------
>> a way to store and organize data for efficient access.

List:
-----
>> [data1, data2.....]
>> Iteratable and Mutable and Duplicates are allowed.
Mutable---> Values can be changed.

In-built methods of list 
-------------------------
.append(val) --> add the values at end.
.insert(pos, val) --> adds element at specified position.
.pop() --> it will just remove the last element from the list.
.pop(ind) --> it will remove that particular index.
.remove(ele) --> removes  a particular element.(first occurence)
.sort()---> arranges a list
.reverse() ---> reversing the list.
.index()---> index of any value

Tuple
------
>> (ele1, ele2,.....)
>> Iteratable, immutable, it allows duplicate.

> Faster than List, Fixed datatype.

Set 
----
>> {val1, val2, val3}
it does not allow duplicate.
No indexing and No Slicing.

in-built methods 
-------------------
set1.intersection(set2)--> common elements
set1.union(set2)--> all the elements elements

Dict 
--------
>> {key1:val1,key2:value2,......}
dict[key] --> to access the value.

mutable

in-built methods
------------------
.keys() --> list of keys
.values() --> list of values 


Functions and Scopes
---------------------
>> A function is a block of code that is written once and can be used multiple times.

>> Avoids repeating the code.

syntax:
-------
def funcName():
    #block of code

calling:
---------
funcName()

Parameters and Arguments:
--------------------------
P--> Variables written inside a function definition without static value.

A--> Arguments are the actual values you pass when you call the function.

Types of P & A.
----------------
1)Positional Arguments
>> Order matters

2)Keyword arguments 
---------------------
>>specify parameter name while calling.

3) Default Argument
--------------------
>> Give a default value in case no arguement is passed


Return Keyword
--------------
>> Functions can return data to the caller

>> to break a function 
>> give some data to the caller

Scopes
-------
>> the region of the program where a variable is recognized and can be used.

Local scope --> inside the current function
Global scope -->  outside the function.

Exception Handling
-------------------



File Handling 
--------------


OOP 
---