Python
------
>> High-level, interpreted, general-purpose programming language.

compilation ---> whole code will get converted into machine code. Ex: C,C++,Java
interpretation --> line by line code execution. Ex: Python

Key - features:
---------------
Simple and easy to read syntax.

.py ---> extension for python file.


In-built function to show an output
--------------------------------------
print() ---> code ---> ouput.

Variable
---------
>> these are just a container to store a piece of data.

rule:
------
>> variable name can contain letters, numbers and _.
>> a variable name should start with lettr or _.
>> cannot use any revserved keywords.. (for, while, if...)


name = data.


In-built function to get input
-------------------------------
input(sentence) output --> code.

to execute python file in terminal ---> python "file name".

Comments
-----------
Comments will not get executed.
Single line comment --> #
mmultiline commnt ---> '''  comment   '''

Basic Syntax Rule
-----------------
>> Case sensitive.
>> Indentation is important.


Datatypes
-----------
type()---> find datatype of an object

Integer---> whole numbers --> Ex: 1,2,3,7,0,-1,-2
Float---> decimal numbers ---> -2.2223, -33.676, 55.555, 1.0

String---> Sequence on characters inside quotes.'',"". for concatination ---> +. formatted string---> f""

Boolean---> True and False

Type Casting
-------------
coverting one datatype into another.

str(obj) ---> converts into string.
int(obj)  --> contverting into Integer
float(obj) --> to float
bool(obj) ---> to float.


Operators
---------
>> 1+2  --> 1,2--> operands, + --> operator.

Arithmetic Operators  (only with numbers)
--------------------
Add ---> +
Sub ---> -
Div ---> /
Mul ---> *
Floor Div --> // (quo)
Modulus ---> % (Reminder). 10%3-->3*3-->9--> 10-9=1. 44%3--> 14*3-->42 -->2. 2/3-->0*3--> 0-->2-0-->2
Expo--> ** --> 2 ** 2 --> 2 power 2.

BODMAS --> Brackets, Order (of), Div, Mul, Add, Sub.

Comparison/Relational Operators
----------------------------------
used to compare values, return only Boolean Values(True/False).

== --> equal to operator.
!= --> not equal.
> ---> greater than
< ---> lesser than 
<= ---> Lesser than or equal 
>= ---> Greater than or equal 

Logical operator (booleans)
----------------

and ---> True--> when the both booleans are true. False otherwise.

or ----> True --> when any one of the oprerands is True. When both are false --> False

not --> one operand. inverts a boolean value.
True --> False
False --> True

boolean1  boolean2
True      True
True      False 
False     True
False     False

Assignment Operators 
--------------------
= ---> assign.
+= --> Add and assign. Ex: a+=b. a=a+b
-= --> Subtract and assign.
*= --> Subtract and assign.
/= --> Div and assign.
%= --> Mod and assign.
**= --> expo and assign

Bitwise Operator 
----------------

(AND) & --> and operation bitwise. 7&8--> 0
(OR) | --> or operation bitwise. 7|8--> 0
(not) ~ --> not operation between bits. Ex: ~5=-6, ~6=-7, ~-7=6. ~a=-(a+1)
(Left Shift) num<<pos --> ex: 6<<2.
(Right Shift) num>>pos --> 6>>2


Control Flow
-------------
>> It execute a block of code depending on conditions.

if block:
---------
>>if the given condition is True, then it will execute that block of code. otherwise, it will just skip it.
syntax:
--------
if condition:
    block of code.

else block:
-----------
>> should always come with if block
syntax 
-------
if condition:
    #if block code 
else:
    #else block code

elif block:
------------
>> this block should come after if block, but before else
syntax 
--------
elif condition:
    #block elif code

if condition1:
    #if block
elif condition2:
    #elif block
elif condition3:
    #elif block
elif condition4:
    #elif block
else:
    #else block

Nested If:
----------
>> Using if statements inside another if.

if condition:
    if condition:
        #block of code
